#include <msp430.h>

volatile unsigned int dummy_counter = 0;

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer

    P1DIR &= ~BIT3;             // Configure Port1 pin3 as Input
    P1REN |= BIT3;

    P1DIR |= BIT6;              // Configure Port1 pin6 (Red Led) as Output
    P1SEL |= BIT6;

    TA0CCR0 = 1000;
    TA0CCTL1 = OUTMOD_7;
    TA0CCR1 = 10;
    TA0CTL = TASSEL_2 | MC_1 | ID_0 | TAIE;
    TA0CCR1 &= ~CCIFG;

    _bis_SR_register(LPM0_bits + GIE);
    _enable_interrupts();

    while(1){

    }
}

// Timer A0 interrupt service routine
#pragma vector=TIMER0_A1_VECTOR
__interrupt void TIMER0_A1_PWM(void)
{
    static volatile unsigned int COUNTMODE = 1;
    static volatile int counter = 0;
    TA0CTL &= ~TAIFG;
    if(!(P1IN&BIT3)){
        if((COUNTMODE == 1) && (TA0CCR1 < 1000)){
                TA0CCR1 = TA0CCR1 + 1;
            }
            else if((COUNTMODE == 1) && (TA0CCR1 > 999)){
                COUNTMODE = 0;
                TA0CCR1 = 1000;
            }
            if((COUNTMODE == 0) && (TA0CCR1 > 10)){
                TA0CCR1 = TA0CCR1 - 1;
            }
            else if((COUNTMODE == 0) && (TA0CCR1 < 11)){
                COUNTMODE = 1;
                TA0CCR1 = 10;
            }
    }
    else{
        TA0CCR1 &= 0xFFFF;
    }

}

/* BATU
int Counter = 1000;
int up = 1;

void main(void) {
    WDTCTL = WDTPW + WDTHOLD;

    P1DIR |= BIT6;

    P1SEL |= BIT6;

    CCTL0 = CCIE;
    CCR0 = 1000;
    CCTL1 = OUTMOD_3;
    CCR1 = 1000;
    TACTL = TASSEL_2 + MC_1 + ID_3;

    _bis_SR_register(LPM0_bits + GIE);
}


#pragma vector = TIMER0_A0_VECTOR
__interrupt void Timer_A (void) {

 if( up )
 Counter = Counter - 5;
 else
 Counter = Counter + 5;
 //_delay_cycles(200000);
 CCR1 = Counter;
 if( Counter <= 0 )
 up = 0;
 if( Counter >= 1000 )
 up = 1;

}
*/


