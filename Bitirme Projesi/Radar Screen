import processing.serial.*; // imports library for serial communication
import java.awt.event.KeyEvent; // imports library for reading the data from the serial port
import java.io.IOException;

Serial myPort; // defines Object Serial
// defubes variables
String angle="";
String distance="";
String data="";
String noObject;
float pixsDistance;
int iAngle, iDistance;
int index1=0;
int index2=0;
PFont orcFont;
// PImage hacettepe_logo; // hacettepe logosu
void setup() {
  
 
 size (1920,1080); // ***CHANGE THIS TO YOUR SCREEN RESOLUTION*** --> width ve height buradan alınıyor
 smooth();
 myPort = new Serial(this,"COM1", 115200); // starts the serial communication
 myPort.bufferUntil('.'); // reads the data from the serial port up to the character '.'. So actually it reads this: angle,distance.
 orcFont = loadFont("OCRAExtended-48.vlw");
 
 //hacettepe_logo = loadImage("hacettepe.png");
 fill(0,0,0);
 noStroke();
 rect(0,0,300,height);
 //image(hacettepe_logo,30,30,width/8,height/6);
 
}

void draw() {
  
  fill(98,245,31);
  textFont(orcFont);
  // simulating motion blur and slow fade of the moving line
  noStroke();
  fill(0,4); 
  rect(0, 0, width, height-height*0.065); 
  
  fill(98,245,31); // green color
  // calls the functions for drawing the radar
  drawRadar(); 
  drawLine();
  drawObject();
  drawText();
}

void serialEvent (Serial myPort) { // starts reading data from the Serial Port
  // reads the data from the Serial Port up to the character '.' and puts it into the String variable "data".
  data = myPort.readStringUntil('.');
  data = data.substring(0,data.length()-1);
  
  index1 = data.indexOf(","); // find the character ',' and puts it into the variable "index1"
  angle= data.substring(0, index1); // read the data from position "0" to position of the variable index1 or thats the value of the angle the Arduino Board sent into the Serial Port
  distance= data.substring(index1+1, data.length()); // read the data from position "index1" to the end of the data pr thats the value of the distance
  
  // converts the String variables into Integer
  iAngle = Integer.parseInt(angle);
  iDistance = Integer.parseInt(distance);
}

void drawRadar() {
  pushMatrix();
  translate(width/2,(height-height*0.074)/2); // moves the starting coordinats to new location //1. parametre genel şekli x ekseninde, 2. parametre y ekseninde hareket ettirir // 1.9 idi
  noFill();
  strokeWeight(2);
  stroke(98,245,31);
  // draws the arc lines
  arc(0,0,(width-width*0.0625)/2,(width-width*0.0625)/2,0,TWO_PI); // 3 ve 4. parametreler çemberlerin büyüklüğünü 5 ve 6. parametreler başlangıç ve bitiş noktasını belirtir (0-2pi = çember)
  arc(0,0,(width-width*0.27)/2,(width-width*0.27)/2,0,TWO_PI);
  arc(0,0,(width-width*0.479)/2,(width-width*0.479)/2,0,TWO_PI);
  arc(0,0,(width-width*0.687)/2,(width-width*0.687)/2,0,TWO_PI);
  // draws the angle lines
  line(-width/4,0,width/4,0);                                      // 3 ve 4. parametrelerle oynarak açı çizgilerini çemberlerle aynı boyuta getirdim
  line((width/4)*cos(radians(30)),(width/4)*sin(radians(30)),(-width/4)*cos(radians(30)),(-width/4)*sin(radians(30))); // 150
  line((width/4)*cos(radians(60)),(width/4)*sin(radians(60)),(-width/4)*cos(radians(60)),(-width/4)*sin(radians(60))); // 120
  line((width/4)*cos(radians(90)),(width/4)*sin(radians(90)),(-width/4)*cos(radians(90)),(-width/4)*sin(radians(90))); // 90
  line((width/4)*cos(radians(120)),(width/4)*sin(radians(120)),(-width/4)*cos(radians(120)),(-width/4)*sin(radians(120))); // 60
  line((width/4)*cos(radians(150)),(width/4)*sin(radians(150)),(-width/4)*cos(radians(150)),(-width/4)*sin(radians(150))); // 30
  line((-width/4)*cos(radians(30)),0,width/4,0);
  popMatrix();
}

void drawObject() {
  pushMatrix();
  translate(width/2,(height-height*0.074)/2); // moves the starting coordinats to new location //1.9 idi
  strokeWeight(9);
  stroke(255,10,10); // red color
  if(iDistance<=50){
    pixsDistance = iDistance*3;       
  }
  else{
    pixsDistance = 50 + iDistance*2;    
  }
  // covers the distance from the sensor from cm to pixels
  // limiting the range to 40 cms
  if(iDistance<200){
    // draws the object according to the angle and the distance
  line(pixsDistance*cos(radians(iAngle)),-pixsDistance*sin(radians(iAngle)),(0.5*(width-width*0.505))*cos(radians(iAngle)),-(0.5*(width-width*0.505))*sin(radians(iAngle)));
  }
  popMatrix();
}

void drawLine() {
  pushMatrix();
  strokeWeight(9);
  stroke(30,250,60);
  translate(width/2,(height-height*0.074)/2); // moves the starting coordinats to new location //1.9 idi
  line(0,0,((height-height*0.12)/2)*cos(radians(iAngle)),-((height-height*0.12)/2)*sin(radians(iAngle))); // draws the line according to the angle
  popMatrix();
}

void drawText() { // draws the texts on the screen
  
  pushMatrix();
  translate(0,-13); // ALttaki bilgiler tam gorunsun diye yukari cikarmak icin gerekli
  if(iDistance>40) {
  noObject = "Out of Range";
  }
  else {
  noObject = "In Range";
  }
  // ACI UZAKLIK VE RANGE BILGISININ OLDUGU ALAN
  fill(0,0,0);
  noStroke();
  rect(0, height-height*0.0648, width, height);
  
  /* SOL BANNER KISMI
  fill(0,0,0);
  noStroke();
  rect(0,0,300,height);
  */
  
  fill(98,245,31);
  textSize(25);
  
  
  text("0.5m",(width/2)+(width-width*0.687)/4,(height-height*0.0833)/2);
  text("1.0m",(width/2)+(width-width*0.479)/4,(height-height*0.0833)/2);
  text("1.5m",(width/2)+(width-width*0.27)/4,(height-height*0.0833)/2);
  text("2m",(width/2)+(width-width*0.0625)/4,(height-height*0.0833)/2);
  textSize(40);
  text("Object: " + noObject, width-width*0.875, height-height*0.0277);
  text("Angle: " + iAngle +" °", width-width*0.48, height-height*0.0277);
  text("Distance: ", width-width*0.26, height-height*0.0277);
  if(iDistance<200) {
  text("        " + iDistance +" cm", width-width*0.225, height-height*0.0277);
  }
  
  //BURASI DUZELTILECEK ORANTILI DEGIL
  textSize(25);
  fill(98,245,60);
  translate(((width-width*0.4994)+width/2*cos(radians(30))/2),((height-height*0.0907)-width/2*sin(radians(30)))/2);
  rotate(-radians(-60));
  text("30°",0,0);
  resetMatrix();
  translate(((width-width*0.503)+width/2*cos(radians(60))/2),(((height-height*0.0888)-width/2*sin(radians(60)))/2)-5);
  rotate(-radians(-30));
  text("60°",0,0);
  resetMatrix();
  translate((((width-width*0.507)+width/2*cos(radians(90))/2))-5,((height-height*0.0833)-width/2*sin(radians(90)))/2);
  rotate(radians(0));
  text("90°",0,0);
  resetMatrix();
  translate((width-width*0.513+width/2*cos(radians(120))/2-3),((height-height*0.07129)-width/2*sin(radians(120)))/2+4);
  rotate(radians(-30));
  text("120°",0,0);
  resetMatrix();
  translate(((width-width*0.5104)+width/2*cos(radians(150))/2)-1,((height-height*0.0574)-width/2*sin(radians(150)))/2+5);
  rotate(radians(-60));
  text("150°",0,0);
  resetMatrix();
  translate(((width-width*0.5098)+width/2*cos(radians(180))/2+5),((height-height*0.0481)-width/2*sin(radians(180)))/2+7);
  rotate(radians(-90));
  text("180°",0,0);
  resetMatrix();
  translate(((width-width*0.5104)+width/2*cos(radians(210))/2)+20,((height-height*0.0574)-width/2*sin(radians(-30)))/2+18);
  rotate(radians(-120));
  text("210°",0,0);
  resetMatrix();
  translate(((width-width*0.513)+width/2*cos(radians(240))/2+38),((height-height*0.07129)-width/2*sin(radians(-60)))/2+15);
  rotate(radians(-150));
  text("240°",0,0);
  resetMatrix();
  translate(((width-width*0.507)+width/2*cos(radians(270))/2),((height-height*0.0833)-width/2*sin(radians(-90)))/2);
  rotate(radians(-180));
  text("270°",0,0);
  resetMatrix();
  translate(((width-width*0.503)+width/2*cos(radians(300))/2+30),((height-height*0.0888)-width/2*sin(radians(-120)))/2+7);
  rotate(radians(-210));
  text("300°",0,0);
  resetMatrix();
  translate(((width-width*0.4994)+width/2*cos(radians(330))/2+16),((height-height*0.0907)-width/2*sin(radians(-150)))/2-2);
  rotate(radians(-240));
  text("330°",0,0);
  popMatrix();
  
  //image(hacettepe_logo,30,30,width/8,height/6);
}
