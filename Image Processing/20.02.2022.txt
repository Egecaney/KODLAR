""" Hareket Tutmalı
cap = cv2.VideoCapture(0)
#cap.set(3, 1280)
#cap.set(4,720)
x1 = 0
y1 = 0
while(True):

    ret, frame = cap.read()

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (5, 5), 0)
    gray = cv2.medianBlur(gray, 5)
    gray = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY, 11, 3.5)
    output = gray.copy()

    kernel = np.ones((3, 3), np.uint8)
    gray = cv2.erode(gray, kernel, iterations=1)

    # gray = erosion
    # gray = cv2.dilate(gray, kernel, iterations=1)
    # gray = dilation
    # gray = cv2.dilate(gray, kernel, iterations=1)
    # cv2.imshow('frame',gray)

    circles = cv2.HoughCircles(gray, cv2.HOUGH_GRADIENT, 1.5, 100, param1=60, param2=65, minRadius=5, maxRadius=70)

    if ((circles is not None) and np.shape(circles)[0] == 1):
        # convert the (x, y) coordinates and radius of the circles to integers

        circles = np.round(circles[0, :]).astype("int")

        if (not ((x1 - 6 < circles[0][0] < x1 + 6) and (y1 - 6 < circles[0][1] < y1 + 6))):
            # loop over the (x, y) coordinates and radius of the circles
            object = 0
            for (x, y, r) in circles:
                # draw the circle in the output image, then draw a rectangle in the image
                # corresponding to the center of the circle

                x1 = circles[0][0]
                y1 = circles[0][1]
                object = 1
                t = cv2.circle(frame, (x, y), r, (0, 255, 0), 4)
                cv2.rectangle(frame, (x - 5, y - 5), (x + 5, y + 5), (0, 128, 255), -1)
                if object == 1:
                    valueX = write_read(x)
                    # valueY = write_read(y)
                    print(valueX)
                    break

        # print("x:",x," y:",y, " r:", r,"object:",object)
        cv2.imshow('gray', gray)

        # Display the resulting frame
    cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()
"""


""" Parametre Değiştirme
def empty(a):
    pass
cv2.namedWindow("Parameters")
cv2.resizeWindow("Parameters",640,240)
cv2.createTrackbar("Threshold1","Parameters",50,255,empty)
cv2.createTrackbar("Threshold2","Parameters",50,255,empty)
"""
#Kare
"""
framewidth = 640
frameheight = 480
cap = cv2.VideoCapture(0)
cap.set(3,framewidth)
cap.set(4,frameheight)


def stackImages(scale,imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range ( 0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor= np.hstack(imgArray)
        ver = hor
    return ver

def getContours(img,imgContour):
    contours,hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)  # SIMPLE DENE
    # cv2.drawContours(imgContour,contours,-1, (0, 0, 255), 7)

    for i in contours:
        area = cv2.contourArea(i)
        if area > 5000:
            peri = cv2.arcLength(i, True)
            approx = cv2.approxPolyDP(i, 0.02 * peri, True)
            object =0
            if len(approx)  < 5:
                # cv2.drawContours(imgContour, contours, -1, (0, 0, 255), 7)
                print(len(approx))
                x, y, w, h = cv2.boundingRect(approx)
                cv2.rectangle(imgContour, (x, y), (x + w, y + h), (0, 255, 0), 5)
                cv2.putText(imgContour,"Area: "+ str(int(area)),(x+w+20,y+20),cv2.FONT_HERSHEY_COMPLEX,0.7,(0,0,255),2)
                if object == 1:
                    break



while True:
    success, img = cap.read(0)
    imgContour = img.copy()

    imgBlur = cv2.GaussianBlur(img, (7, 7), 1)
    imgGray = cv2.cvtColor(imgBlur, cv2.COLOR_BGR2GRAY)

    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    imgCanny = cv2.Canny(imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    imgdilate = cv2.dilate(imgCanny, kernel, iterations=1)

    getContours(imgdilate, imgContour)

    cv2.imshow("Result", imgContour)
    cv2.imshow("Canny", imgCanny)
    cv2.imshow("Image Dilate", imgdilate)


    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
"""
""" Parametre Değiştirmeli Daire
cap = cv2.VideoCapture(0)

#cap.set(3, 1280)
#cap.set(4,720)


while(True):
    # Capture frame-by-frame
    ret, frame = cap.read(0)

    imgBlur = cv2.GaussianBlur(frame, (5, 5), 0)
    imgGray = cv2.cvtColor(imgBlur, cv2.COLOR_BGR2GRAY)

    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    imgCanny = cv2.Canny(imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    imgdilate = cv2.dilate(imgCanny, kernel, iterations=1)
    output = imgdilate.copy()

    #cv2.imshow('frame',gray)
    circles = cv2.HoughCircles(imgdilate, cv2.HOUGH_GRADIENT, 2.2, 120, param1=140, param2=100, minRadius=50, maxRadius=100)

    if circles is not None:
        # convert the (x, y) coordinates and radius of the circles to integers
        circles = np.round(circles[0, :]).astype("int")

        # loop over the (x, y) coordinates and radius of the circles
        object=0
        for (x, y, r) in circles:
            # draw the circle in the output image, then draw a rectangle in the image
            # corresponding to the center of the circle
            object=1
            t = cv2.circle(output, (x, y), r, (0, 255, 255), 4)
            cv2.rectangle(output, (x - 5, y - 5), (x + 5, y + 5), (255, 255, 255), -1)
            print("x:",x," y:",y)
            if object==1 :
                break


        # Display the resulting frame
        cv2.imshow('Gray', imgdilate)
    cv2.imshow('Result', output)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()
"""


"""" Tutmadı
cap = cv2.VideoCapture(0)
while(True):
    ret, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.medianBlur(gray, 5)
    circles = cv2.HoughCircles(blur, cv2.HOUGH_GRADIENT,1, 100, 10, param1=130, param2=55, minRadius=5, maxRadius=0)

    ncircles = np.uint16(np.around(circles))
    for i in ncircles[0, :]:
        cv2.circle(frame, (i[0], i[1]), i[2], (0, 255, 0), 2)
        cv2.circle(frame, (i[0], i[1]), 2, (0, 0, 255), 3)

    cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
         break

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()
"""


"""
cap = cv2.VideoCapture(0)

while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Convert to gray-scale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Blur the image to reduce noise
    img_blur = cv2.medianBlur(gray, 5)
    # Apply hough transform on the image
    circles = cv2.HoughCircles(img_blur, cv2.HOUGH_GRADIENT, 1, frame.shape[0]/32, param1=200, param2=50, minRadius=50, maxRadius=100)
    # Draw detected circles
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for i in circles[0, :]:
            cv2.circle(frame, (i[0], i[1]), i[2], (0, 255, 0), 2)
            cv2.circle(frame, (i[0], i[1]), 2, (0, 0, 255), 3)

    # Display the resulting frame
    cv2.imshow('gray', gray)
    cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
         break

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()
"""
